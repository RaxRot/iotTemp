#include <WiFi.h>
#include <PubSubClient.h>

// === WiFi и MQTT ===
const char* ssid = "Xiaomi 11T Pro";
const char* password = "19649072";
const char* mqtt_server = " 192.168.54.237"; // Поменяй если IP другой
#define mqtt_port 1883
#define TOPIC "/ic/Grupo0"
const char* topic1 = "/#";
const char* clientId = "Arduino0";

// === UART пины ===
#define RXD2 16
#define TXD2 17

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

void setup_wifi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

bool PingHost(IPAddress ip) {
  WiFiClient client;
  const int port = mqtt_port;
  const int timeout = 2000;

  Serial.print("Trying to connect to ");
  Serial.print(ip);
  Serial.print(":");
  Serial.println(port);

  if (client.connect(ip, port)) {
    client.stop();
    return true;
  } else {
    return false;
  }
}

void reconnect() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (mqttClient.connect(clientId)) {
      Serial.println("mqttClient connected");

      mqttClient.publish(TOPIC, "hello world");
      Serial.print("Publish : ");
      Serial.print(TOPIC);
      Serial.println(" : hello world");

      boolean res = mqttClient.subscribe(topic1);
      Serial.print("Subscribed to ");
      Serial.print(topic1);
      Serial.println(res ? "  OK" : "  FAIL");
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void publishSerialData(const String& msg) {
  if (!mqttClient.connected()) {
    reconnect();
  }
  mqttClient.publish(TOPIC, msg.c_str());
  Serial.print("Published to ");
  Serial.print(TOPIC);
  Serial.print(" : ");
  Serial.println(msg);
}

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);

  setup_wifi();

  // Проверка доступности MQTT брокера
  IPAddress mqttIP;
  if (WiFi.hostByName(mqtt_server, mqttIP)) {
    Serial.print("Resolved IP of MQTT server: ");
    Serial.println(mqttIP);

    Serial.print("Pinging MQTT server at ");
    Serial.println(mqttIP);

    if (PingHost(mqttIP)) {
      Serial.println(" MQTT broker reachable!");
    } else {
      Serial.println(" MQTT broker NOT reachable!");
    }
  } else {
    Serial.println(" Could not resolve MQTT server hostname.");
  }

  mqttClient.setServer(mqtt_server, mqtt_port);
  mqttClient.setCallback(callback);
  reconnect();
}

void loop() {
  mqttClient.loop();

  if (Serial2.available()) {
    String msg = Serial2.readStringUntil('\n');
    msg.trim();
    if (msg.length() > 0) {
      Serial.print("Received from Uno: ");
      Serial.println(msg);
      publishSerialData(msg);
    }
  }
}
